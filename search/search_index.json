{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"GL%20Accounts%20Search/","title":"GL Accounts Search","text":"<p>The GL Accounts Search List Window gives you the ability to locate and access records created with the GL ACCOUNT MAINTENANCE APPLICATION as well as create new records.</p> <p>For information about using this and all other search list windows, refer to the SEARCH LIST WINDOW topics.</p>"},{"location":"GL%20Accounts%20Search/#_1","title":"GL Accounts Search","text":"<p>BASIC SEARCH\u00a0for Records</p> <p>Enter criteria in one or more of the fields above the columns at the top of the window if you're looking for a\u00a0specific\u00a0record or\u00a0group\u00a0of records and then hit the Enter key or click the Search button. The system will limit the results of the search to the records that match the values entered in the fields above each column\u00a0(if you\u2019ve entered anything at all).</p> <p>If you want to locate all existing records, press the Enter key or click the Search Button without entering any criteria. You can clear previously-entered criteria by clicking the Clear button at the top right\u2014hand corner of the window.</p> <p>NOTE</p> <p>Search criteria has been added to all search lists linked to maintenance records that have the ability to add Additional Contacts lists. These additions make it possible to search for records based on the people in a record\u2019s Additional Contact list.</p> <p>This specification has only added the ability to search by Additional Contact Lists. It does not include adding the data to the results to search lists.</p>"},{"location":"GL%20Accounts%20Search/#advanced-search-for-records","title":"ADVANCED SEARCH\u00a0for Records","text":"<p>For additional search criteria and to search by record creation dates, click the Filter button found at the top left of this window. A new Criteria window will open in which you can define your search criteria. Click the Search button in this window when ready to perform your search.</p>"},{"location":"GL%20Accounts%20Search/#openedit-existing-records","title":"OPEN/EDIT\u00a0Existing Records","text":"<p>After locating the desired record row, click the hyperlink in the ID field.</p>"},{"location":"GL%20Accounts%20Search/#create-new-records","title":"CREATE\u00a0New Records","text":"<p>You can create new records from this window by clicking the Plus icon\u00a0\u00a0in the navigation bar at the top right corner of this window.</p>"},{"location":"GL%20Accounts%20Search/#saved-searches-note","title":"SAVED SEARCHES NOTE","text":"<p>If you commonly use the same search criteria to locate records, you may want to save a particular set of values to the Filter list.</p> <ol> <li>Enter the desired criteria in the search fields above the columns in this window.</li> <li>Click the dropdown menu attached to the Filter button at the top of this window. From the dropdown menu, select \u2018Create Filter\u2019. You will be asked to choose a layout to use with the document. Choose a layout and click the \u2018OK\u2019 button.</li> <li>The \u2018Search Criteria (New)\u2019 window will appear. Enter a description of the filter that will make it easy to determine the intended outcome (e.g.\u2019Preferred\u2019).<ul> <li>The Public field determines if everyone has access to this saved search or only you do. Activate the checkbox if you want others to be able to use the search.</li> <li>The Default field determines whether the saved search will be your default search. You can override the default if necessary.</li> <li>The Auto Search field instructs the system to perform this search immediately when this search window is opened.</li> <li>If you have checked the Public field, the Division field determines which Division will have access to this saved search. If this field is left blank, the saved search will be available Globally. </li> </ul> </li> <li>Click the Save &amp; Close button.</li> <li>When you want to use this saved search, click the dropdown menu next to the \u2018Filter\u2019 button and \u00a0select a saved search from the drop-down list. The search criteria assigned that saved search will automatically fill the appropriate fields.</li> </ol> <p>NOTE</p> <p>You may modify the currently selected saved search by selecting the saved search as noted above, then adding additional search criterial in the search fields above the window. Once you have added your additional criteria, click the dropdown menu next to the \u2018Filter\u2019 button and select \u2018Update Filter\u2019.</p> <p></p> <p>The system will change the saved filter to match the currently-entered criteria. The system will notify you when the update is complete via a message popup in the upper right-hand corner of your screen.</p> <p></p> <p>You can click the View Saved Searches button to manage other saved searches. The Cancel button cancels the process and the Help button accesses this Help file.</p>"},{"location":"GL%20Accounts%20Search/#layout-note","title":"LAYOUT NOTE","text":"<p>Saved searches are stored by the system at the layout level, not the document level. So, if you save a search for one layout, it will not be available for any other layout.</p>"},{"location":"Image%20test/","title":"Image test","text":"<p>JSON test</p> <pre><code>{\n    \"sys_phone_list\": [\n        {\n         //   \"list_id\": \"-1\",\n            \"external_key\": \"PH1001\",\n            \"list_type\": \"I\",\n            \"first_name\": \"User2\",\n            \"last_name\": \"Last2\"\n        }\n    ]\n}\n</code></pre> <p>JSON test</p> <pre><code>{\n    \"sys_phone_list\": [\n        {\n         //   \"list_id\": \"-1\",\n            \"external_key\": \"PH1001\",\n            \"list_type\": \"I\",\n            \"first_name\": \"User2\",\n            \"last_name\": \"Last2\"\n        }\n    ]\n}\n</code></pre>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/","title":"Media Operations Platform REST API Reference   10.6 \u2013 Xytech Systems","text":""},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#introduction","title":"Introduction","text":"<p>This document describes the Media Operations Platform REST API, which is the interface by which a third-party component can make REST calls over HTTP to the Platform application server endpoint and receive responses from it. It does not cover any of the following topics:</p> <ul> <li>Web Hooks \u2013 please refer to the following article called Webhooks user guide 10.4. </li> <li>The Platform SOAP API</li> <li>Platform Service Order Adapters</li> <li>Other outbound interfaces, such as alternate authentication systems.     Although most of this document is relevant to the v1 API, it also includes features that only exist in the v2 API and are primarily intended for users of the v2 API.</li> </ul>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#summary-of-whats-new-in-v106","title":"Summary of what's new in v10.6","text":"<ul> <li>Swagger documentation now includes the PATCH method using a POST payload.</li> <li>Swagger includes example payloads for sub-tables (previously not populated).</li> <li>Swagger now includes PATCH method for list documents.</li> <li>Other Swagger improvements and correct missing parameter fields.</li> <li>Additional header parameters for optimization and filtering<ul> <li>Ignore alternate keys</li> <li>Omit null values</li> <li>Filter results for maintenance documents</li> </ul> </li> </ul>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#definitions","title":"Definitions","text":"PlatformMedia Operations Platform application\u00a0APIApplication Program Interface is a set of functions or procedures offered by a host system that allows one or more applications, services, or systems to send information to, request information from, or make changes to the host system.RESTRepresentational State Transfer is an architectural style of principles that define a set of constraints for how two systems can communicate over a network such as the World Wide Web. The REST architecture is described in REST BasicsVerbIn REST, this is the programmatic method used to initiate an API command, usually GET, PUT, POST, or DELETE. See also HTTP Methods for more information.SwaggerA third-party tool that generates API documentation automatically based on the Open API specification. It presents a browsable, usable Web site as a URL within the API Web service. See also Open API.cURLcURL is a mechanism for transferring data using networking protocols. It is provided in two ways:\u2022 As a command line tool that allows a user to submit requests directly and see the results, usually for testing purposes.\u2022 As a library with integrations to several common programming languages, including C++, C#, PHP, and others.ModelA collection of properties, usually defined as name/value pairs or collections of name/value pairs, that make up a document or a portion of a document. An API may accept one or more models as input, to create a new record or modify an existing record using all the specified values. An API may also provide one or more models as output, either as a list of identical models (e.g., retrieving multiple records as part of a list document) or as a collection of related models (e.g., retrieving all models related to a particular Job document).Postman<p>A third-party platform for building and testing APIs; the Postman client application is available on several operating systems and provides a set of tools to test API calls without having to write code and helps debug API calls and response payloads. https://www.postman.com/</p>OAS,OpenAPIFormerly known as Swagger Specification, the OpenAPI Specification (OAS) defines a standard interface to RESTful APIs. This language-agnostic interface can then be used by code generation, documentation generation, and testing tools to access and understand the underlying API.\u00a0Refer to https://swagger.io/specification/ for more information."},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#api-basics","title":"API Basics","text":"<p>This section describes the fundamental ideas behind APIs, the REST protocol, and the portions of the Platform system involved.</p> <p>The purpose of an application program interface (API) is to allow an external computer or piece of software (here called an endpoint) to interact with the system that exposes the interface (here called the host), to allow the endpoint to do one or more of the following:</p> <ul> <li>Create new records in the host system</li> <li>Retrieve information from the host system</li> <li>Update existing records in the host system</li> <li>Delete existing records in the host system</li> <li>Trigger operations or business logic in the host system</li> </ul> <p>Unlike a user interface, an API is a mechanism for one piece of software to talk to another and usually does not require the action of a person. In some cases, however, an API is used to allow a third-party user interface to interact with the host system.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#rest-basics","title":"REST Basics","text":"<p>Representational State Transfer (REST) is an architectural style of principles that define a set of constraints for how two systems can communicate over a network such as the World Wide Web. These principles are used to create reliable Web APIs where no state information needs to be retained by the host system offering the API.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#features-and-benefits","title":"Features and Benefits","text":"<p>The REST architecture provides the following benefits:</p> <ul> <li> <ul> <li>Simple \u2013 In general, REST calls follow a set of common patterns that can be learned and followed without significant amounts of special syntax.</li> <li>Stateless - Being \u201cstateless\u201d allows the API provider to handle high volumes of requests with high performance.<ul> <li>The server is not required to keep state information in memory.</li> <li>The client is not required to connect to a specific server to utilize stored state information, so requests can be distributed among any number of servers.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#http-methods","title":"HTTP Methods","text":"<p>RESTful services utilize HTTP methods to differentiate between different types of API calls.</p> VerbCommunity Used ForGET\u00a0Usually retrieves a representation of the resource\u2019s current state, such as performing a simple query that gathers and returns information about one or more resources (e.g., database records) from the host system.In the Platform API, GET commands are used to retrieve setup documents, maintenance documents, or list documents.Examples include:Retrieving a list of all records of a certain document type, such as all Bids, all Jobs, or all Contacts in the system,<ul><li>Retrieving a list of all records of a certain document type that match specified criteria, such as all Bids that start in the current year, all Jobs associated with a specific Client, or all Contacts whose names begin with the letter A, or</li><li>Retrieving a specific record of a certain document type, such as all the properties of a Job with a specific Job ID.</li></ul>Note: A GET command is entirely contained within the URI sent to the endpoint. As a result, there is a limit on the amount of text that can be sent to the API, so GET commands usually do not support a significant amount of search or filter criteria.PATCHPatch usually updates an existing state with a specified one using partial information. See also PUT to completely replace an existing state, and POST for updating an existing state in some cases. In the Platform API, usually updates an existing record, such aschanging the mailing address of a Contact or changing the status of a Job.POSTPost usually processes the representation provided with the request to create a new representation or update an existing representation.\u00a0In the Platform API, POST commands are usually used to create new records, such as adding a new resource or creating a new Job.PUTPut usually updates an existing record by completely replacing an existing state with a specified one or creating a new state where the URI is already known. See also PATCH to replace only a portion of an existing state. In the Platform API, PUT commands will be used to perform upsert calls from v11; refer to POST commands for creating new items or PATCH commands for updating existing items.DELETEDelete commands are usually used to permanently remove existing records from the host system.\u00a0Note: DELETE commands should be used sparingly; to both preserve data integrity and provide historical information, it is usually recommended to change the Status of a record instead of deleting the record completely. <p>Response Codes</p> <p>REST services are built on top of the HTTP protocol, so calls to the REST service generate HTTP response codes. In many cases, the HTTP response code will be accompanied by additional information in the header or body of the message. In some cases, the HTTP response code may be the only response.</p> Response Code\u00a0Description2xx range\u00a0Success Codes200 OkThe call was successful. In most cases, there will be additional information returned by the API in the body of the message, such as the matching record(s) for a query, or the ID of a record created, modified, or deleted by a corresponding API call.204 No ContentThe server has fulfilled the request but does not need to return a response body. The server may return the updated meta information.4xx range\u00a0Client Error400 Bad RequestThe call was not successful due to an error in the URL or the syntax of the API call. Check the syntax of the API call to make sure there are no invalid characters.401 UnauthorizedThe call was not successful because the API requires a validcredentials, and they were not provided as part of the call.Response Code Description Verify that the call is providing login information in an acceptable manner.404 Not FoundThe call was not successful because the service could not find the requested API. Check the URL for any mismatches between the API call being sent and the documented API signature.5xx range\u00a0Server Error500 Internal Server ErrorThe call was not successful because it caused an error in the service during processing, such as providing an incorrect data type for a given property/field. Verify that all parameters are correct, and values are valid.502 Bad GatewayThe call was not successful because the service got an invalid response from the API. Verify that all parameters are correct, and values are valid. <p>For more information refer to the appropriate section of the HTTP protocol or a developer resource for HTTP status codes, such as the MDN Web Docs.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#xytech-platform-rest-api","title":"Xytech Platform REST API","text":"<p>The Platform is, at a fundamental level, a system that deals with creating, updating, and utilizing a particular type of data object referred to as a document.</p> <ul> <li>Each Platform document is a representation of a database table or collection of database tables.<ul> <li>Each document has a primary table and may have one or more sub-tables.</li> <li>All sub-tables are children of the primary table, and a sub-table can have one or more child sub-tables.</li> </ul> </li> <li>Each document is one of the following types of documents:<ul> <li>Setup - generally describes a single item, and usually only contains a primary table. Setup documents are often used to manage simple items used to generate lists of options in other documents, such as status labels or predefined sets of codes.</li> <li>Maintenance \u2013 generally describes either master data (which are used in transactional data) or transactional data. Maintenance documents often contain one or more sub-tables.</li> <li>List documents provide access to sets of other records, such as Setup and Maintenance documents.</li> </ul> </li> </ul> <p>The Platform REST API is JSON-based and has Open API v3.0 API specifications for each API call available in YAML. These specifications can be retrieved as a plain YAML file and are also readily available to be viewed in a browser through the Swagger UI. See the Error! Reference source not found. below for more information.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#high-level-data-model-diagram","title":"High level data model diagram","text":"<p>This diagram provides you with a high-level understanding of the primary Xytech Platform data objects and how they relate.</p> <p>Below the name of each data object is the REST API endpoint used for accessing the data object. Where ~/ is prefixed before the endpoint, that indicates it is a sub-table endpoint of the primary endpoint. See the Swagger documentation for full details.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#_1","title":"Media Operations Platform REST API Reference   10.6 \u2013 Xytech Systems","text":""},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#rest-api-v1-and-v2","title":"REST API v1 and v2","text":""},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#deprecation-of-v1-api","title":"Deprecation of v1 API","text":"<ul> <li>REST API v1 was the first Xytech REST API product. It had limitations that required breaking changes to improve so v2 was made available from Xytech v9.4 release with improved functionality.</li> <li>REST API v1 will no longer be supported in version 11.0 and beyond.</li> <li>All new integrations should use v2 API and existing integrations should port to v2</li> <li>To use v2 API, change the base URL version number from ../v1/.. to ../v2/..</li> </ul>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#additional-features-in-v2-api-as-of-platform-v102-release","title":"Additional Features in v2 API (as of Platform v10.2 release)","text":"<ul> <li>Payload structure is enhanced and updated to be more robust and scalable.     The document name is now always added as the root element of the payload with an array containing the details.\u00a0</li> </ul> <p>Example showing the additional root element jm_job: </p> API V1 JSON payload for GET JmJob<p>API V2 JSON payload for GET JmJob</p> <p>/JmJob/job_no=11261</p><p></p><p>/JmJob/job_no=11261</p><p></p> <ul> <li> <ul> <li>See the Swagger documentation for details of the JSON structure for each endpoint.</li> </ul> </li> <li> <p>Additional PATCH capabilities In addition to the existing v1 PATCH method where each changed field must be defined using the operation/path/value payload structure, you can now use the same JSON payload you would use for a POST call to update a record. This needs to use the header 'Content-Type: application/json-patch+json'. See the section below for more details.</p> </li> <li> <p>Pagination &amp; sorting API Pagination has been added to the REST API \u2018Get\u2019 Query for Lists. Parameters for:</p> <p><p>pageSize\u00a0</p>are the number of records returned per page.\u00a0pageare the page number to return.\u00a0<p>sort </p>is the field to sort by followed by ascending or descending order.\u00a0</p> <p>Example: To return the first 10 records on page 1 sorted by product_no: GET {server}}/JmOrgProductList?query=\"active\":\"Y\"}&amp;resultColumns=\"L\":\"product_no\",\"product_desc\"]}&amp;sort=\"product_no_desc\"]&amp;pageSize=10&amp;page=1</p> <p>This will allow sites to call for data in manageable payloads without exceeding memory limitations.</p> </li> </ul>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#connecting-to-the-rest-api","title":"Connecting to the REST API","text":""},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#licensing","title":"Licensing","text":"<p>While there is a specific license point for the REST API, by default all Platform installations are given access to the API.</p> <p>The REST API is a component of the Platform\u2019s Application Server. On hosted systems, it is available by default to all customers.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#instance-information-you-will-need","title":"Instance Information You Will Need","text":"<p>To be able to connect with the REST API, you will need to know the instance:</p> <ul> <li>Base URL e.g. \u2018https://example.com\u2019 (The same base url you use to access your system)</li> <li>Database name e.g. \u2018DEMO1\u2019</li> </ul> <p>For systems installed prior to mid 2023, you may also require the port number. All later systems are now setup with a proxy to avoid the need to know the port number.</p> <p>If you do not have this information, please contact Xytech Technical Support.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#swagger-api-documentation","title":"Swagger API Documentation","text":"<p>From Platform version v10.2, a Swagger index page has been introduced to assist in the navigation and creation of Swagger YAML documentation. The Swagger index page can be found by entering the base URL you use for accessing the Platform and adding \u201c/ApiDocs\u201d to the end (e.g., www.xytechexample.com/XYT_TEST/ApiDocs). The Xytech API Index page is displayed.\u00a0</p> <p></p> <p>Using the Index The Index is comprised of the following areas:</p> <ul> <li>Version: Displayed in the upper left corner of the screen. This shows the API version, currently either v1 or v2.</li> <li>Selected Database: The name of the database currently selected for this host.     Only modules for that database are shown.</li> <li>Available Databases: (Where multiple databases exist on the same host) Click a database to select it and view its associated modules.</li> <li>Filter Documents: Enter text into this field and press [Enter] to only display matching document descriptions. To clear the filter, delete the text and press [Enter].</li> <li>Module and Document List: Only modules in the selected database are displayed. Click any Module to expand and show the documents it contains. Each document has a label that describes its type (Document [maintenance], List, or Setup).</li> </ul>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#for-versions-prior-to-v102","title":"For versions prior to v10.2","text":"<p>For versions prior to v10.2 you will need to generate the Swagger documentation manually for each document endpoint.</p> <p>Use a browser to generate the Swagger document:</p> <p>http://{host}:{port}/API/v2/database/{db_name}/spec/{docName}</p> <p>For example:</p> <p>http://myhost:8088/API/v2/database/mp10/spec/JmJob</p> <p>The above URL will generate the Swagger document and then display the Swagger document.</p> <p>To display generated Swagger documents, browse to:</p> <p>http://{host}:{port}/REST/SwaggerUI/dist/index.html?document={docName}_v2</p> <p>For example:</p> <p>http://myhost:8088/REST/SwaggerUI/dist/index.html?document=JmDivision_v2</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#authentication","title":"Authentication","text":"<p>The REST API currently uses Basic Authentication and will require a database login account. Always use HTTPS encrypted protocol when communicating with the REST API to ensure credentials are not passed in clear text.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#using-postman-as-a-test-client","title":"Using Postman as a test client","text":"<p>This section describes using the third-party Postman application as an API client for testing and troubleshooting purposes. The example uses the JmJob (Job) endpoint.</p> <p>To execute a GET call to retrieve an existing record:</p> <ol> <li>Open the Postman application</li> <li>From File click New and click HTTP Request</li> <li>Leave the method as GET</li> <li>Enter the URL:  <ul> <li>http://{base_url}/API/v2/database/{dbname}/jmJob/job_no=100\u00a0<ul> <li>Replace {base_url} &amp; {dbname} with your base URL &amp; database name and provide a valid Job Number that exists in your instance.</li> </ul> </li> </ul> </li> <li>On the Authorization tab, set Type to Basic Auth and enter a valid username and password, e.g. xytech/xytechpw</li> <li>Click Send and observe the response.</li> </ol> <p>To execute a POST call to create a new record: </p> <ol> <li>Open the Postman application.</li> <li>From File click New and click HTTP Request.</li> <li>Change the method to POST.</li> <li>Add a Header:<ul> <li>Key: Content-Type</li> <li>Value: application/json</li> </ul> </li> <li>Enter the URL: http://{base_url}/API/v2/database/{dbname}/jmJob</li> <li>On the Authorization tab, set Type to Basic Auth and enter a valid username and password, e.g. xytech/xytechpw</li> <li>On the Body tab, set the type to json, and provide a valid JSON object with the minimum fields to create a job. For example, to create a simple Job:</li> </ol> <p>{</p> <p>\"jm_job\": [</p> <p>{</p> <p>\"cust_id\": {</p> <p>\"list_id\": \"409\"</p> <p>},</p> <p>\"job_desc\": \"Passing Fancy\",</p> <p>\"job_no\": {</p> <p>\"job_no\": -1</p> <p>},</p> <p>\"job_type_no\": {</p> <p>\"job_type_no\": 11</p> <p>}</p> <p>}</p> <p>]</p> <p>}</p> <p>NOTES:</p> <ul> <li> <ul> <li>To generate the primary key job_no, set the value to -1.         When creating multiple sub-records in a single call, subsequent records must advance the primary key ID by -1. E.g -1, -2, -3 etc\u2026</li> <li>Be aware some fields are mandatory such as Job Type (job_type_no) and Customer ID (list_id).</li> <li>Numeric values will be accepted with or without quotes.</li> </ul> </li> </ul> <p>8. Click Send and observe the response with status code 200 (success with response body).</p> <p>The id of the created record is returned in a header parameter called 'Location'.</p> <p>In v10.6 SP1 a response payload will contain the ID(s) of newly created records.</p> <p>To execute a DELETE call to remove an existing record:</p> <ol> <li>Open the Postman application.</li> <li>From File click New and click HTTP Request.</li> <li>Change the method to DELETE.</li> <li>Enter the URL:     http://{base_url}/api/v2/database/{dbname}/JmJob/job_no=67982</li> <li>On the Authorization tab, set Type to Basic Auth and enter a valid username and password, e.g. xytech/xytechpw</li> <li>Click Send and observe the response with status code 204 (success with no response body).</li> </ol>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#using-curl-as-a-test-client","title":"Using cURL as a test client","text":"<p>This section describes using the third-party cURL command line utility as an API client for testing and troubleshooting purposes.\u00a0</p> <p>Many REST clients (either via an online tool or desktop application) use a lightweight program called curl to interact over many different types of network protocols (including HTTP, HTTPS, FTP, IMAP, etc.) Windows users may use the curl command from the Command Prompt to call teh REST API and output dumps of useful data.</p> <p>Curl is included with Windows v10 1803 and later.</p> <p>Example curl on Windows to fetch job details and download the response to a file (replace credentails, base url and database name with your values:</p> <pre><code>curl -u xytech:password &lt;a href=\"https://{base/\"&gt;https://{base_&lt;/a&gt;url}/api/v2/database/{database name}/JmJob/job_no=342 -H \"Accept: application/json\" &amp;gt;c:\\temp\\ApiResponse.txt\n</code></pre>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#key-fields-in-the-payload-structure","title":"Key fields in the payload structure","text":"<ul> <li>The nested sub-group identified by the primary key field name, provides all the key fields of a document. As a minimum, this sub-group always contains the primary key field and an 'external key' field.</li> </ul> <p>Example shows a section of the Work Order's (jm_work_order) key fields in the sub-group wo_no_seq.</p> <p>{</p> <p>\"jm_work_order\": [</p> <p>{</p> <p>\"wo_no_seq\": {</p> <p>\"wo_no_seq\": \"2627-1\",</p> <p>\"external_key\": null</p> <p>},</p> <p>\"custom_field_data_no\": 63888,</p> <p>\"wo_desc\": \"Dscription2\",</p> <p>\"wo_desc_2\": null,</p> <p>...</p> <ul> <li> <ul> <li>In the above example wo_no_seq and external_key are the two key fields that can be used in lookup requests.</li> <li>Some documents may have additional key fields such as Media Assets (known by the document name lib_master) See example below.</li> </ul> </li> </ul> <p>Example Media Asset document where there are additional key fields for 'barcode' &amp; 'umid' in the 'master_no' group.</p> <p>{</p> <p>\"lib_master\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 53,</p> <p>\"barcode\": \"1838\",</p> <p>\"external_key\": null,</p> <p>\"umid\": null</p> <p>},</p> <p>\"cust_id\": {</p> <p>\"list_id\": \"23\",</p> <p>\"other_cust_id\": null,</p> <p>\"cust_reference\": null,</p> <p>\"external_key\": null,</p> <p>\"cust_id\": \"23\"</p> <p>},</p> <p>\"customer_name\": \"Gotta Dance Productions\",</p> <p>\"master_desc\": \"A Winter's Tale\",</p> <p>\"barcode\": \"1838\",</p> <p>\"container_master_no\": null,</p> <p>...</p> <ul> <li>External key fields exist on all documents and are designed to be used by external systems to store the external system's unique identifier for the record. The external key field can then be used in future look-ups as opposed to the external system having to know the Xytech key field value..</li> </ul>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#example-postman-collection-calls","title":"Example Postman Collection calls","text":"<p>An extensive set of example API calls is available via the Platform\u2019s REST API Postman Collection. This collection contains example calls for three types of documents (maintenance, list, and setup).\u00a0</p> <p>We suggest forking the collection to your own workspace which enables you to 'pull' for updates as teh collection grows.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#patch-update-datetime-fields-to-null","title":"PATCH - update datetime fields to 'null'","text":"<p>It may seem like an obvious approach to use the 'update' operation with a value of 'null' to clear a datetime field, but datetime fields will not get set to null in that way.</p> <p>The only way to 'null' a datetime field is by using the 'remove' operation.</p> <p>Example PATCH payload that set's a datetime field to 'null':</p> <p>[</p> <p>{</p> <p>\"op\": \"remove\",</p> <p>\"path\": \"goodnight_date\",</p> <p>\"value\": null</p> <p>}</p> <p>]</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#query-parameters","title":"Query parameters","text":"<p>GET and PATCH List endpoints support query parameters.</p> <p>This section describes the syntax and options used for the query parameter. This is a mandatory parameter for List documents.</p> <p>The general format for a \u201cquery\u201d parameter is to add the parameter as query={} to the end of a GET request for a List document after the parameter delimiter (\u201c?\u201d), where the value of query= is a JSON object:</p> <p>http://{base_url}/documentList?query={key: value}</p> <p>Such as:</p> <p>http://{base_url}/jmJobList?query={\"job_no\": \"12345\"}</p> <p>Note: The query parameter is supported only for GET and PATCH requests for List type documents and is not supported by GET requests for Setup or Maintenance documents.</p> <p>In the simplest form, the value is a single piece of information, such as a string or integer. In more complex forms, the value is a JSON object containing specific formats as described below.</p> <p>In these examples below, the baseurl is assumed to include the document endpoint e.g \u2018https://example.com/api/v2/database/example/JmJobList\u2019</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#tip-url-encoding-of-special-characters-eg-and","title":"TIP: URL encoding of special characters e.g. % and +","text":"<p>When using HTML special characters as part of the query value, they must be URL encoded.</p> <p>Example:\u00a0\u00a0to use a wildcard query such as \"%dave%\", the % needs substituting with %25. \u00a0Once URL encoded will look like this %25dave%25</p> <p>Example GET query with URL encoded wildcard :</p> <p>{{server}}/MoMediaOrderList?query={\"wo_desc\":\"%25dave%25\"}&amp;resultcolumns={\"L\": [\"wo_no\", \"wo_desc\"]}</p> <p>(Specifically the reason why\u00a0%dave% fails to return valid results it that %da\u00a0is the encoding for the\u00a0\u00da character)</p> <p>This also applies to datetime values that use the offset attribute with the + sign.</p> <p>To include a value of \"2023-06-01T09:00+5:00\" in a URL query parameter, substitute + with %2b</p> <p>Example:</p> <p>?query={\"wo_begin_dt\":{\"$range\":[\"2023-06-01T09:00%2b5:00\",\"2023-06-01T17:00%2b5:00\"]}}</p> <ul> <li>String or Number</li> </ul> Description\u00a0The value in returned items must match a specified string. The stringcan either be letters or numbers. Wildcard \u2018%\u2019 can be used.\u00a0Syntax\u00a0\u201cfield\u201d:\u201d value\u201d<p>Examples:</p><p>baseurl?Query={\u201cjob_desc\u201d:\u201d Big Apple Live\u201d}</p><p>baseurl?Query={\u201cjob_desc\u201d:\u201d%Big%\u201d}</p><p>baseurl?Query={\u201cjob_no\u201d:101101}</p> <p>To specify multiple key/value pairs, separate each key/value pair with a comma: baseurl?query={\"cust_id\":\"123\",\"job_type_no\":\"4\"} baseurl?query={\"cust_id\":\"123\",\"job_type_no\":\"4\",\"active\":\"Y\"} Note: When specifying multiple key/value pairs, the API will return only items that match ALL specified criteria.</p> <ul> <li>Range</li> </ul> Description\u00a0The value in returned items must fall between a specified minimumand maximum numeric value.Syntax\u00a0\u201cfield\u201d:{\"$range\":[lower_limit, upper_limit]}Examplesbaseurl?Query={\u201cjob_no\u201d:{\"$range\":[100, 199]}}baseurl?query={\"wo_begin_dt\":{\"$range\":[\"2023-12-01\",\"2023-12-31\"]}}baseurl?query={\"wo_begin_dt\":{\"$range\":[\"2023-06-01T09:00\",\"2023-06-01T17:00\"]}} <ul> <li>In (Set)</li> </ul> Description\u00a0The value in returned items must match one of the values provided in a given set of values.Syntax\u00a0\u201cfield\u201d:{\"$in\":[\u201cvalue_1\u201d,\u201dvalue_2\u201d, \u2026 \u201dvalue_n\u201d]}Examples\u00a0baseurl?Query={\u201cjob_no\u201d:{\"$in\":[100, 105, 110, 119]}} <p>TIP: Searching for multiple wildcard values</p> <p>If you wanted to search for multiple wildcard values contained within a single field that all need to exist, then you can include a list of wildcard values.</p> <p>For example, if you wanted to search for media assets that have \"Tale\" AND \"Dark\" in their \"master_desc\" field, you can use the following query parameter:</p> <p>{\"master_desc\":{$in:[\"%Tale%Dark%\",\"%Tale%Dark%\"]}}</p> <p>Or with encoding of the % symbol (if using Postman) you need:</p> <p>{\"master_desc\":{$in:[\"%25Tale%25Dark%25\",\"%25Tale%25Dark%25\"]}}</p> <ul> <li>Null / Empty</li> </ul> Description\u00a0The value in returned items must be NULL. Note: Put pipe charactersaround NULL to differentiate it from the literal string \u201cNULL\u201d.Syntax\u00a0\"field\u201d: \u201c|NULL|\u201d\u00a0Examples\u00a0baseurl?Query={\u201cphone_number\u201d:{\"|NULL|\"}} <ul> <li>NE (Not Equal)</li> </ul> Description\u00a0The value in returned items must not match the specified number, string, or NULL.Syntax\u00a0\u201cfield\u201d:{\"$ne\":\u201dvalue\u201d}<p>Examples:\u00a0Not equal\u00a0Not null\u00a0\u00a0Not like</p><p>baseurl?Query={\"job_desc \":{\"$ne\":\"Big Apple Live\"}}baseurl?Query={\"cust_id\":{\"$ne\":1001}}baseurl?Query={\"jm_phase_external_key\":{\"$ne\":\"|NULL|\"}}baseurl?Query={\"wo_desc\":{\"$ne\":\"Test%\"},\"wo_type_no\": 83}\u00a0</p> <p>NULL Values</p> <p>The Null parameter returns any record that has a null value for the specified key, which indicates that no value has ever been set. This differentiates it from an empty string for text-based or date-based properties, a 0 value for numbers, and true or false values for Boolean properties.</p> <p>Note: Not all properties support null values. If possible, check whether the database column in the appropriate column allows nulls.</p> <p>Keys are strings and generally match the column name from a given database table. It is recommended to match the case of the key name as shown in the Swagger API documentation if possible.</p> <p>Values</p> <p>- String values are not case-sensitive.</p> <p>- DateTime values should be provided in a valid ISO date format.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#resultcolumns-parameter","title":"resultColumns parameter","text":"<p>Used by the GET method on List and (v10.6) Maintenance endpoints.</p> <p>ResultColumns parameter is used to define the fields you wish to have returned in the response. Without this parameter, the response will contain all document fields.</p> <p>For example: {baseurl}/JmJobList?Query={\"job_no\":2}&amp;resultColumns={\"L\":[\"job_no\",\"job_desc\"]}</p> <p>Job No. and Job Description fields will be included in the response. Important to include the \u201cL\u201d top-level element.</p> <p>Sub-Table columns</p> <p>Many endpoints include related sub-tables in their responses. Example syntax to include specific sub-table columns.</p> <p>Below example fetches a tranmission order description and all it's service row numbers:</p> <p>{base_url}/XmTransmissionOrder/wo_no_seq=7655-1?resultColumns={\"jm_work_order\":[\"wo_desc\"],\"mo_service_row\":[\"service_row_no\"]}</p> <p>Response:</p> <p>{</p> <p>\"jm_work_order\": [</p> <p>{</p> <p>\"wo_desc\": \"WS Transmission Test\",</p> <p>\"mo_service_row\": [</p> <p>{</p> <p>\"service_row_no\": {</p> <p>\"service_row_no\": 9933,</p> <p>\"external_key\": null</p> <p>}</p> <p>},</p> <p>{</p> <p>\"service_row_no\": {</p> <p>\"service_row_no\": 9934,</p> <p>\"external_key\": null</p> <p>}</p> <p>}</p> <p>]</p> <p>}</p> <p>]</p> <p>}</p> <p>Performance recomendation. Always use the ResultColumns parameter otherwise responses will return large numbers of fields most of which will not be required and only adds to the system perfromance overhead. In future API versions, this will become a mandatory parameter.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#additional-parameters","title":"Additional parameters","text":""},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#saveargument","title":"saveArgument","text":"<p>In some cases, you must also add a header with the SaveArgument parameter to trigger the app server to perform a function as part of an API call. For example, when creating a Work Order, to load a Work Order Template you must provide the wo_template_no value in the payload as well as set the SaveArguement header:</p> <p>LoadTemplate: SaveArgument : {\"LoadTemplate\":\"2\"}</p> <p>LoadServiceTemplate, loads a service template to a Media Order or a Transmission Order:</p> <p>SaveArgument : {\"LoadServiceTemplate\":\"10\"}</p> <p>BidApproval, changes the bid approval state of a Bid using an number that maps to the approval</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#saveargument-bidapproval0","title":"SaveArgument : {\"BidApproval\":\"0\"}","text":"<p>Approval number mapping:</p> 0Approval1Unapproval2ApproveAsChangeMemo3ApproveAndUnApproveOriginal4Abort"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#alternatekeyhandling","title":"alternatekeyhandling","text":"<p>Suppresses additional key fields from the responses. If you do not need to work with key fields other than the primary key, use this parameter to keep the API call performant and reduce the processing overhead when not working with alternate key fields (v10.6).</p> <p>Applicable to all GET calls for List, Maintenance &amp; Report endpoints.</p> <p>Values are \u2018ignore\u2019 or \u2018include\u2019.</p> <p>Default value = \u2018include\u2019 (includes alternate keys in the response)</p> <p>Example:</p> <p>URL Parameter:- alternatekeyhandling:include (default) </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915,</p> <p>\"barcode\": \"MM915\",</p> <p>\"external_key\": \"VX-90\",</p> <p>\"umid\": null</p> <p>},</p> <p>\"cust_id\": null,</p> <p>\"company_name\": null,</p> <p>\"master_desc\": null,</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>URL Parameter:- alternatekeyhandling:ignore </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915</p> <p>},</p> <p>\"cust_id\": null,</p> <p>\"company_name\": null,</p> <p>\"master_desc\": null,</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>Notice how the additional key fields barcode, external_key &amp; umid are not provided.</p> <p>It's recommended to always include this header with the value 'ignore', unless working with alternate keys.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#nullvaluehandling","title":"nullvaluehandling","text":"<p>Suppresses all null value fields from the response. Using this parameter reduces the payload size dramatically, especially for larger queries (v10.6).</p> <p>Applicable to all GET calls for List, Maintenance &amp; Report endpoints.</p> <p>Values are \u2018ignore\u2019 or \u2018include\u2019.</p> <p>Default value = \u2018include\u2019 (includes null values in the response)</p> <p>Example:</p> <p>URL Parameter:- nullvaluehandling=include (default) </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915,</p> <p>\"barcode\": \"MM915\",</p> <p>\"external_key\": \"VX-90\",</p> <p>\"umid\": null</p> <p>},</p> <p>\"cust_id\": null,</p> <p>\"company_name\": null,</p> <p>\"master_desc\": null,</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>URL Parameter:- nullvaluehandling=ignore </p> <p>{</p> <p>\"L\": [</p> <p>{</p> <p>\"master_no\": {</p> <p>\"master_no\": 915,</p> <p>\"barcode\": \"MM915\",</p> <p>\"external_key\": \"VX-90\"</p> <p>},</p> <p>\"barcode\": \"MM915\",</p> <p>...</p> <p>Notice how all null value fields are omitted. It's recommended to always include this parameter with the value 'ignore', unless visibility of null values is required.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#source-time-zone-name","title":"Source-Time-Zone-Name","text":"<p>The REST API uses Date time formats in ISO format with an optional offset value.</p> <p>e.g. 2014-11-03T22:20:00+00:00</p> <p>If you omit the offset value when using POST to create a record, you can use a header parameter to set the time zone your dates are using. Key: Source-Time-Zone-Name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Value: {Windows Time Zone name}</p> <p>e.g. : header 'Source-Time-Zone-Name: Pacific Standard Time '</p> <p>Will create records using Pacific Standard Time as the time zone for the payload times. Remember to omit the offset values in your time formats.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#patch-using-post-payload","title":"PATCH Using POST Payload","text":"<p>There are two PATCH methods, one where you define the field and the operation, the other is to use the full POST JSON payload.</p> <p>To use the PATCH with the full JSON payload, you must include the header parameter:</p> <p>'Content-Type: application/json-patch+json'</p> <p>Example Job update (cURL format):</p> <p>curl --location --request PATCH</p> <p>'https: //{base_url}/api/v2/database/{database_name}/JmJob/job_no=345' \\</p> <p>--header\u00a0'Content-Type:\u00a0application/json-patch+json'\u00a0\\</p> <p>--header\u00a0'Authorization:\u00a0Basic\u00a0eHl0ZWNoOk1lZGlhMjwqNSE='\u00a0\\</p> <p>--data\u00a0'{</p> <p>\"jm_job\":\u00a0[</p> <p>{</p> <p>\"job_no\":\u00a0{</p> <p>\"job_no\":\u00a0345</p> <p>},</p> <p>\"job_desc\":\"Leaves\u00a0of\u00a0October\",</p> <p>\"job_type_no\":\u00a0{</p> <p>\"job_type_no\":\u00a07</p> <p>},</p> <p>\"po\":\u00a0\"PO1234\",</p> <p>\"job_reference\": \"Streets\u00a0Ahead\"</p> <p>}</p> <p>]</p> <p>}'</p> <p>Notes:</p> <p>The payload must include the existing primary key (job_no in the above example) as a URL parameter as well as in the body payload.</p> <p>The expected response status code for a successful PATCH is \u2018204\u2019 and there will be no response body.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#patch-using-list-endpoints","title":"PATCH using List endpoints","text":"<p>List endpoints also support the PATCH method so that you can update multiple records using a query (see \u2018GET \u2013 Query Parameters\u2019 section above for details on available query parameters). This method is teh equilivant API functionality of Grid Update feature of the UI. Example to update multiple jobs using the $in query parameter:</p> <p>PATCH {base_url}/JmJobList?query={\"job_no\": {\"$in\": [\"410\",\"411\"]}}</p> <p>[</p> <p>{</p> <p>\"op\":\u00a0\"replace\",</p> <p>\"path\":\u00a0\"job_reference\",</p> <p>\"value\":\u00a0\"These\u00a0are\u00a0not\u00a0taxed\"</p> <p>}</p> <p>]</p> <p>As\u00a0with\u00a0GET,\u00a0wildcards\u00a0\u2018%\u2019\u00a0are\u00a0supported\u00a0such\u00a0as:</p> <p>PATCH {base_url}__/\u00a0JmJobList?Query={\"job_desc\":\u00a0\"Sport%\"}</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#post-method","title":"POST method","text":"<p>Mandatory Fields to Create New Items</p> <p>The Swagger model identifies many fields as mandatory (nullable: false), which indicates that a value must be provided when the item is written to the database. However, in some cases, the business logic will provide default values, so it may not be strictly necessary to pass values for these fields to the API to create a new record.\u00a0 For example, in a basic payload to create a Work Order, Swagger identifies at least 25 fields as mandatory, but the most basic payload to create a Work Order is below:</p> <p>{</p> <p>\"jm_work_order\":\u00a0[</p> <p>{</p> <p>\"external_key\":\u00a0\"externalID\",</p> <p>\"wo_desc\":\u00a0\"Match2\",</p> <p>\"wo_begin_dt\":\u00a0\"2022-01-01T00:00\",</p> <p>\"wo_end_dt\":\u00a0\"2022-01-01T06:00\",</p> <p>\"wo_type_no\":\u00a02,</p> <p>\"phase_code\":\u00a0\"Bid\",</p> <p>\"rate_card_no\":\u00a01,</p> <p>\"cust_id\":\u00a0\"6\",</p> <p>\"wo_template_no\":\u00a0\"2\"</p> <p>}</p> <p>]</p> <p>}</p> <p>See other basic payload examples in the public Postman Collection.</p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#custom-field-handling","title":"Custom Field handling","text":"<p>Any custom fields you have defined through document customization are automatically included in REST API payloads. The naming convention is a combination of the Custom Code you created plus the internal field name concatenated with an underscore. i.e. {customization code}_{field name}</p> <p>Document customization screen showing the Customnization Code</p> <p></p> <p>Document customization screen showing the internal field names:</p> <p></p> <p>Response from a GET call to fetch a Work Order showing the payload custom fields:</p> <p></p>"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#appendix-a-endpoint-list","title":"Appendix A \u2013 Endpoint List","text":"<p>There are over 1000 individual documents (endpoints) available to the Platform\u2019s REST API. Below is a small sample of those documents. The full list of available documents can be obtained directly from the Platform using the Document Customizations query found in the System module. Specific documentation on each document can be found via the Swagger site.</p> ID\u00a0Class Name\u00a0Document Description\u00a0Document Type10315\u00a0JmJob\u00a0Job\u00a0Maintenance315\u00a0JmJobList\u00a0Jobs\u00a0Select (List)10317\u00a0JmJobStatus\u00a0Job Statuses\u00a0Setup10318\u00a0JmJobTable1\u00a0Subscription\u00a0Setup10322\u00a0JmJobType\u00a0Job Types\u00a0Setup359\u00a0JmTrxReport\u00a0Transaction Reports\u00a0Select (List)10339\u00a0JmWorkOrderWork Order\u00a0Maintenance10346\u00a0JmWoTransaction\u00a0Work Order Transactions\u00a0Maintenance"},{"location":"Media%20Operations%20Platform%20REST%20API%20Reference%20-%2010.6%20%E2%80%93%20Xytech%20Systems/#appendix-b-swagger-examples","title":"Appendix B \u2013 Swagger Examples","text":""},{"location":"Pasted/","title":"Pasted","text":""},{"location":"Untitled/","title":"Untitled","text":""},{"location":"Untitled/#h_01HF42RKB6E2YR0RQ4RYZHV71V","title":"Introduction","text":"<p>   This document describes the Media Operations Platform REST API, which is the   interface by which a third-party component can make REST calls over HTTP to the   Platform application server endpoint and receive responses from it. It does not   cover any of the following topics: </p> <ul> <li>     Web Hooks \u2013 please refer to the following article called     Webhooks user guide 10.4.\u00a0 </li> <li>The Platform SOAP API</li> <li>Platform Service Order Adapters</li> <li>     Other outbound interfaces, such as alternate authentication systems.     Although most of this document is relevant to the v1 API, it also includes     features that only exist in the v2 API and are primarily intended for users     of the v2 API.   </li> </ul>"},{"location":"Untitled/#h_01HKT2AK41QD6G450RPS4XSMM6","title":"Summary of what's new in v10.6","text":"<ul> <li>     Swagger documentation now includes the     PATCH method using a POST payload.   </li> <li>     Swagger includes example payloads for sub-tables (previously not populated).   </li> <li>     Swagger now includes     PATCH method for list documents. </li> <li>     Other Swagger improvements and correct missing parameter fields.   </li> <li>     Additional header     parameters for optimization and filtering <ul> <li> Ignore alternate keys </li> <li> Omit null values </li> <li> Filter results for maintenance documents </li> </ul> </li> </ul>"},{"location":"Untitled/#h_01HF30DJ7M98Z65ZT21DNGVQZH","title":"Definitions","text":"Platform Media Operations Platform application\u00a0 API          Application Program Interface is a set of functions or procedures         offered by a host system that allows one or more applications, services,         or systems to send information to, request information from, or make         changes to the host system.        REST          Representational State Transfer is an architectural style of principles         that define a set of constraints for how two systems can communicate         over a network such as the World Wide Web. The REST architecture         is described in         REST Basics Verb          In REST, this is the programmatic method used to initiate an API         command, usually GET, PUT, POST, or DELETE. See also         HTTP Methods         for more information.                 Swagger                 A third-party tool that generates API documentation automatically         based on the Open API specification. It presents a browsable, usable         Web site as a URL within the API Web service. See also Open API.        cURL          cURL is a mechanism for transferring data using networking protocols.         It is provided in two ways:         \u2022 As a command line tool that allows a user to submit requests directly         and see the results, usually for testing purposes.         \u2022 As a library with integrations to several common programming languages,         including C++, C#, PHP, and others.        Model          A collection of properties, usually defined as name/value pairs or         collections of name/value pairs, that make up a document or a portion         of a document. An API may accept one or more models as input, to         create a new record or modify an existing record using all the specified         values. An API may also provide one or more models as output, either         as a list of identical models (e.g., retrieving multiple records         as part of a list document) or as a collection of related models         (e.g., retrieving all models related to a particular Job document).        Postman <p>           A third-party platform for building and testing APIs; the Postman           client application is available on several operating systems           and provides a set of tools to test API calls without having           to write code and helps debug API calls and response payloads.           https://www.postman.com/ </p>          OAS,         OpenAPI                 Formerly known as Swagger Specification, the OpenAPI Specification         (OAS) defines a standard interface to RESTful APIs. This language-agnostic         interface can then be used by code generation, documentation generation,         and testing tools to access and understand the underlying API.\u00a0         Refer to         https://swagger.io/specification/         for more information."},{"location":"Untitled/#h_01HF37ATBNZDTSG1JDW62N8MEP","title":"API Basics","text":"<p>   This section describes the fundamental ideas behind APIs, the REST protocol,   and the portions of the Platform system involved. </p> <p>   The purpose of an application program interface (API) is to allow an external   computer or piece of software (here called an endpoint) to interact with the   system that exposes the interface (here called the host), to allow the endpoint   to do one or more of the following: </p> <ul> <li>Create new records in the host system</li> <li>Retrieve information from the host system</li> <li>Update existing records in the host system</li> <li>Delete existing records in the host system</li> <li>Trigger operations or business logic in the host system</li> </ul> <p>   Unlike a user interface, an API is a mechanism for one piece of software to talk   to another and usually does not require the action of a person. In some cases,   however, an API is used to allow a third-party user interface to interact with   the host system. </p>"},{"location":"Untitled/#h_01HF387Q6QAWSQ2EZMVZPAYQ1J","title":"REST Basics","text":"<p>   Representational State Transfer (REST) is an architectural style of principles   that define a set of constraints for how two systems can communicate over a network   such as the World Wide Web. These principles are used to create reliable Web   APIs where no state information needs to be retained by the host system offering   the API. </p>"},{"location":"Untitled/#h_01HF3885WHG4DD15DXJ7TCXDR9","title":"Features and Benefits","text":"<p>The REST architecture provides the following benefits:</p> <ul> <li> <ul> <li>         Simple \u2013 In general, REST calls follow a set of common patterns that         can be learned and followed without significant amounts of special         syntax.       </li> <li>         Stateless - Being \u201cstateless\u201d allows the API provider to handle high         volumes of requests with high performance.         <ul> <li>             The server is not required to keep state information in memory.           </li> <li>             The client is not required to connect to a specific server             to utilize stored state information, so requests can be distributed             among any number of servers.           </li> </ul> </li> </ul> </li> </ul>"},{"location":"Untitled/#h_01HF42TTJMW7WJRZ5CQ9GZMFSB","title":"HTTP Methods","text":"<p>   RESTful services utilize HTTP methods to differentiate between different types   of API calls. </p> <p> </p> Verb Community Used For GET\u00a0          Usually retrieves a representation of the resource\u2019s current state,         such as performing a simple query that gathers and returns information         about one or more resources (e.g., database records) from the host         system.         In the Platform API, GET commands are used to retrieve setup documents,         maintenance documents, or list documents.         Examples include:         Retrieving a list of all records of a certain document type, such         as all Bids, all Jobs, or all Contacts in the system,         <ul> <li>             Retrieving a list of all records of a certain document type             that match specified criteria, such as all Bids that start             in the current year, all Jobs associated with a specific             Client, or all Contacts whose names begin with the letter             A, or           </li> <li>             Retrieving a specific record of a certain document type,             such as all the properties of a Job with a specific Job ID.           </li> </ul>         Note: A GET command is entirely contained within the URI sent to         the endpoint. As a result, there is a limit on the amount of text         that can be sent to the API, so GET commands usually do not support         a significant amount of search or filter criteria.        PATCH          Patch usually updates an existing state with a specified one using         partial information. See also PUT to completely replace an existing         state, and POST for updating an existing state in some cases. In         the Platform API, usually updates an existing record, such as         changing the mailing address of a Contact or changing the status         of a Job.        POST          Post usually processes the representation provided with the request         to create a new representation or update an existing representation.\u00a0         In the Platform API, POST commands are usually used to create new         records, such as adding a new resource or creating a new Job.        PUT          Put usually updates an existing record by completely replacing an         existing state with a specified one or creating a new state where         the URI is already known. See also PATCH to replace only a portion         of an existing state. In the Platform API, PUT commands will be used         to perform upsert calls from v11; refer to POST commands for creating         new items or PATCH commands for updating existing items.        DELETE          Delete commands are usually used to permanently remove existing records         from the host system.\u00a0         Note: DELETE commands should be used sparingly; to both preserve         data integrity and provide historical information, it is usually         recommended to change the Status of a record instead of deleting         the record completely.        <p> </p> <p> Response Codes </p> <p>   REST services are built on top of the HTTP protocol, so calls to the REST service   generate HTTP response codes. In many cases, the HTTP response code will be accompanied   by additional information in the header or body of the message. In some cases,   the HTTP response code may be the only response. </p> <p> </p> Response Code\u00a0 Description 2xx range\u00a0 Success Codes 200 Ok          The call was successful. In most cases, there will be additional         information returned by the API in the body of the message, such         as the matching record(s) for a query, or the ID of a record created,         modified, or deleted by a corresponding API call.        204 No Content          The server has fulfilled the request but does not need to return         a response body. The server may return the updated meta information.        4xx range\u00a0 Client Error 400 Bad Request          The call was not successful due to an error in the URL or the syntax         of the API call. Check the syntax of the API call to make sure there         are no invalid characters.        401 Unauthorized          The call was not successful because the API requires a valid         credentials, and they were not provided as part of the call.         Response Code Description Verify that the call is providing login         information in an acceptable manner.                 404 Not Found          The call was not successful because the service could not find the         requested API. Check the URL for any mismatches between the API call         being sent and the documented API signature.        5xx range\u00a0 Server Error 500 Internal Server Error          The call was not successful because it caused an error in the service         during processing, such as providing an incorrect data type for a         given property/field. Verify that all parameters are correct, and         values are valid.        502 Bad Gateway          The call was not successful because the service got an invalid response         from the API. Verify that all parameters are correct, and values         are valid.        <p>    For more information refer to the   appropriate section of the HTTP protocol   or a developer resource for HTTP status codes, such as the   MDN Web Docs. </p>"},{"location":"Untitled/#h_01HF32REA2J4DJPMWZXC2KYZ3S","title":"Xytech Platform REST API","text":"<p>   The Platform is, at a fundamental level, a system that deals with creating, updating,   and utilizing a particular type of data object referred to as a document. </p> <ul> <li>     Each Platform document is a representation of a database table or collection     of database tables.     <ul> <li>         Each document has a primary table and may have one or more sub-tables.       </li> <li>         All sub-tables are children of the primary table, and a sub-table         can have one or more child sub-tables.       </li> </ul> </li> <li>     Each document is one of the following types of documents:     <ul> <li> Setup - generally describes a single item, and usually         only contains a primary table. Setup documents are often used to         manage simple items used to generate lists of options in other documents,         such as status labels or predefined sets of codes.       </li> <li> Maintenance \u2013 generally describes either master         data (which are used in transactional data) or transactional data.         Maintenance documents often contain one or more sub-tables.       </li> <li> List documents provide access to sets of other records,         such as Setup and Maintenance documents.       </li> </ul> </li> </ul> <p>   The Platform REST API is JSON-based and has Open API v3.0 API specifications   for each API call available in YAML. These specifications can be retrieved as   a plain YAML file and are also readily available to be viewed in a browser through   the Swagger UI. See the Error! Reference source not found. below for more information. </p>"},{"location":"Untitled/#h_01HKT98RYPP3DHJQ2DKFE36W49","title":"High level data model diagram","text":"<p>   This diagram provides you with a high-level understanding of the primary Xytech   Platform data objects and how they relate. </p> <p>   Below the name of each data object is the REST API endpoint used for accessing   the data object. Where ~/ is prefixed before the endpoint, that indicates it   is a sub-table endpoint of the primary endpoint. See the Swagger documentation   for full details. </p>"},{"location":"Untitled/#h_01HKT98RYPAXQ05FW167ZTW2FC","title":"","text":""},{"location":"Untitled/#h_01HKT98RYPVQ8BVQREJHY949MX","title":"REST API v1 and v2","text":""},{"location":"Untitled/#h_01HF41NX3EMVWH3XRG1VE0P6D7","title":"Deprecation of v1 API","text":"<ul> <li>     REST API v1 was the first Xytech REST API product. It had limitations that     required breaking changes to improve so v2 was made available from Xytech     v9.4 release with improved functionality.   </li> <li>     REST API v1 will no longer be supported in version 11.0 and beyond.   </li> <li>     All new integrations should use v2 API and existing integrations should port     to v2   </li> <li>     To use v2 API, change the base URL version number from ../v1/.. to ../v2/..   </li> </ul>"},{"location":"Untitled/#h_01HF37D08VJRETQVS03SKK2Q24","title":"Additional Features in v2 API (as of Platform v10.2 release)","text":"<ul> <li> Payload structure is enhanced and updated to be more robust and scalable.     The document name is now always added as the root element of the payload     with an array containing the details.\u00a0   </li> </ul> <p> Example showing the additional root element jm_job: </p> API V1 JSON payload for GET JmJob <p> API V2 JSON payload for GET JmJob </p> <p>/JmJob/job_no=11261</p> <p>/JmJob/job_no=11261</p> <ul> <li> <ul> <li>         See the Swagger documentation for details of the JSON structure for         each endpoint.       </li> </ul> </li> <li> Additional PATCH capabilitiesIn addition to the existing     v1 PATCH method where each changed field must be defined using the operation/path/value     payload structure, you can now use the same JSON payload you would use for     a POST call to update a record. This needs to use the header 'Content-Type:     application/json-patch+json'.     See the section below for more details. </li> </ul> <ul> <li> Pagination &amp; sortingAPI Pagination has been added     to the REST API \u2018Get\u2019 Query for Lists. Parameters for: <p> pageSize\u00a0 </p> are the number of records returned per page.\u00a0 page are the page number to return.\u00a0 <p> sort </p>              is the field to sort by followed by ascending or descending             order.\u00a0                 Example:     To return the first 10 records on page 1 sorted by product_no:     GET     {server}}/JmOrgProductList?query=\"active\":\"Y\"}&amp;resultColumns=\"L\":\"product_no\",\"product_desc\"]}&amp;sort=\"product_no_desc\"]&amp;pageSize=10&amp;page=1      This will allow sites to call for data in manageable payloads without exceeding     memory limitations.   </li> </ul>"},{"location":"Untitled/#h_01HF33ASVQ3PKX7Y1NW9N9PK3V","title":"Connecting to the REST API","text":""},{"location":"Untitled/#h_01HF41M0E3PDN5T1YJM5EWRWZM","title":"Licensing","text":"<p>   While there is a specific license point for the REST API, by default all Platform   installations are given access to the API. </p> <p>   The REST API is a component of the Platform\u2019s Application Server. On hosted systems,   it is available by default to all customers. </p>"},{"location":"Untitled/#h_01HF41MJD3GWA4EQTWWMSM2TG3","title":"Instance Information You Will Need","text":"<p>   To be able to connect with the REST API, you will need to know the instance: </p> <ul> <li>     Base URL e.g. \u2018https://example.com\u2019 (The same base url you use to access     your system)   </li> <li>Database name e.g. \u2018DEMO1\u2019</li> </ul> <p>   For systems installed prior to mid 2023, you may also require the port number.   All later systems are now setup with a proxy to avoid the need to know the port   number. </p> <p>   If you do not have this information, please contact Xytech Technical Support. </p>"},{"location":"Untitled/#h_01HF41MS17YF27BJVTKYA39KWA","title":"Swagger API Documentation","text":"<p>   From Platform version v10.2, a Swagger index page has been introduced to assist   in the navigation and creation of Swagger YAML documentation. The Swagger index   page can be found by entering the base URL you use for accessing the Platform   and adding \u201c/ApiDocs\u201d to the end (e.g., www.xytechexample.com/XYT_TEST/ApiDocs).   The Xytech API Index page is displayed.\u00a0 </p> <p> </p> <p> </p> <p> Using the Index   The Index is comprised of the following areas: </p> <ul> <li>     Version: Displayed in the upper left corner of the screen. This shows the     API version, currently either v1 or v2.   </li> <li>     Selected Database: The name of the database currently selected for this host.     Only modules for that database are shown.   </li> <li>     Available Databases: (Where multiple databases exist on the same host) Click     a database to select it and view its associated modules.   </li> <li>     Filter Documents: Enter text into this field and press [Enter] to only display     matching document descriptions. To clear the filter, delete the text and     press [Enter].   </li> <li>     Module and Document List: Only modules in the selected database are displayed.     Click any Module to expand and show the documents it contains. Each document     has a label that describes its type (Document [maintenance], List, or Setup).   </li> </ul>"},{"location":"Untitled/#h_01HKQC6C7JAT5FFXYR0HEDHPRV","title":"For versions prior to v10.2","text":"<p>   For versions prior to v10.2 you will need to generate the Swagger documentation   manually for each document endpoint. </p> <p>Use a browser to generate the Swagger document:</p> <p> http://{host}:{port}/API/v2/database/{db_name}/spec/{docName} </p> <p>For example:</p> <p> http://myhost:8088/API/v2/database/mp10/spec/JmJob </p> <p>   The above URL will generate the Swagger document and then display the Swagger   document. </p> <p>To display generated Swagger documents, browse to:</p> <p> http://{host}:{port}/REST/SwaggerUI/dist/index.html?document={docName}_v2 </p> <p>For example:</p> <p> http://myhost:8088/REST/SwaggerUI/dist/index.html?document=JmDivision_v2 </p>"},{"location":"Untitled/#h_01HF432A2QDTNAGSRW2W8MPY6Y","title":"Authentication","text":"<p>   The REST API currently uses Basic Authentication and will require a database   login account.   Always use HTTPS encrypted protocol when communicating with the REST API to ensure   credentials are not passed in clear text. </p>"},{"location":"Untitled/#h_01HF432H4G52KGXS00QMNA032D","title":"Using Postman as a test client","text":"<p>   This section describes using the third-party Postman application as an API client   for testing and troubleshooting purposes. The example uses the JmJob (Job) endpoint. </p> <p> To execute a GET call to retrieve an existing record: </p> <ol> <li>Open the Postman application</li> <li>From File click New and click HTTP Request</li> <li>Leave the method as GET</li> <li>     Enter the URL: <ul> <li> http://{base_url}/API/v2/database/{dbname}/jmJob/job_no=100\u00a0 <ul> <li>             Replace {base_url} &amp; {dbname} with your base URL &amp;             database name and provide a valid Job Number that exists             in your instance.           </li> </ul> </li> </ul> </li> <li>     On the Authorization tab, set Type to Basic Auth and enter a valid username     and password, e.g. xytech/xytechpw   </li> <li>Click Send and observe the response.</li> </ol> <p> To execute a POST call to create a new record: </p> <ol> <li>Open the Postman application.</li> <li>     From File click New and click     HTTP Request.   </li> <li>     Change the method to POST.   </li> <li>     Add a Header:     <ul> <li>         Key: Content-Type </li> <li>         Value: application/json </li> </ul> </li> <li>     Enter the URL: http://{base_url}/API/v2/database/{dbname}/jmJob   </li> <li>     On the Authorization tab, set Type to Basic Auth and enter     a valid username and password, e.g. xytech/xytechpw   </li> <li>     On the Body tab, set the type to json, and provide a valid     JSON object with the minimum fields to create a job. For example, to create     a simple Job:   </li> </ol> { \"jm_job\": [ \u00a0 \u00a0 \u00a0 \u00a0 { \"cust_id\": { \"list_id\": \"409\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }, \"job_desc\": \"Passing Fancy\", \"job_no\": { \"job_no\": -1 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }, \"job_type_no\": { \"job_type_no\": 11 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } \u00a0 \u00a0 \u00a0 \u00a0 } \u00a0 \u00a0 ] } NOTES:  <ul> <li> <ul> <li>         To generate the primary key job_no, set the value to -1.         When creating multiple sub-records in a single call, subsequent records         must advance the primary key ID by -1. E.g -1, -2, -3 etc\u2026       </li> <li>         Be aware some fields are mandatory such as Job Type (job_type_no)         and Customer ID (list_id).       </li> <li>Numeric values will be accepted with or without quotes.</li> </ul> </li> </ul> <p>   \u00a0 \u00a0 \u00a0 8. Click Send and observe the response   with status code 200 (success with response body). </p>    The id of the created record is returned in a header parameter called 'Location'.  In v10.6 SP1 a response payload will contain the ID(s) of newly created records. <p> To execute a DELETE call to remove an existing record: </p> <ol> <li>Open the Postman application.</li> <li>     From File click New and click     HTTP Request.   </li> <li>     Change the method to DELETE.   </li> <li>     Enter the URL: http://{base_url}/api/v2/database/{dbname}/JmJob/job_no=67982 </li> <li>     On the Authorization tab, set Type to Basic Auth and enter     a valid username and password, e.g. xytech/xytechpw   </li> <li>     Click Send and observe the response with status code 204     (success with no response body).   </li> </ol>"},{"location":"Untitled/#h_01HF4339DX1SYCDK60DYCK93ZA","title":"Using cURL as a test client","text":"<p>   This section describes using the third-party cURL command line utility as an   API client for testing and troubleshooting purposes.\u00a0 </p> <p>   Many REST clients (either via an online tool or desktop application) use a lightweight   program called curl to interact over many different types of network protocols   (including HTTP, HTTPS, FTP, IMAP, etc.) Windows users may use the curl command   from the Command Prompt to call teh REST API and output dumps of useful data. </p> <p>Curl is included with Windows v10 1803 and later.</p> <p> Example curl on Windows to fetch job details and download the response to a file (replace credentails, base url and database name with your values: </p> <pre>curl -u xytech:password https://{base_url}/api/v2/database/{database name}/JmJob/job_no=342 -H \"Accept: application/json\" &gt;c:\\temp\\ApiResponse.txt</pre>"},{"location":"Untitled/#h_01HKQAS67BD284R245T31D2GKV","title":"Key fields in the payload structure","text":"<ul> <li>     The nested sub-group identified by the primary key field name, provides all     the key fields of a document. As a minimum, this sub-group always contains     the primary key field and an 'external key' field.   </li> </ul> <p> Example shows a section of the Work Order's (jm_work_order) key fields in the sub-group wo_no_seq. </p> { \"jm_work_order\": [ \u00a0 \u00a0 \u00a0 { \"wo_no_seq\": { \"wo_no_seq\": \"2627-1\", \"external_key\": null \u00a0 \u00a0 \u00a0 \u00a0 }, \"custom_field_data_no\": 63888, \"wo_desc\": \"Dscription2\", \"wo_desc_2\": null, ... <ul> <li> <ul> <li>         \u00a0In the above example         wo_no_seq and         external_key are the two         key fields that can be used in lookup requests.       </li> <li>         Some documents may have additional key fields such as Media Assets         (known by the document name lib_master) See example below.       </li> </ul> </li> </ul> <p> Example Media Asset document where there are additional key fields for 'barcode' &amp; 'umid' in the 'master_no' group. </p> { \"lib_master\": [ \u00a0 \u00a0 \u00a0 \u00a0 { \"master_no\": { \"master_no\": 53, \"barcode\": \"1838\", \"external_key\": null, \"umid\": null \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }, \"cust_id\": { \"list_id\": \"23\", \"other_cust_id\": null, \"cust_reference\": null, \"external_key\": null, \"cust_id\": \"23\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }, \"customer_name\": \"Gotta Dance Productions\", \"master_desc\": \"A Winter's Tale\", \"barcode\": \"1838\", \"container_master_no\": null, ... <ul> <li>     External key fields exist on all documents and are designed to be used by     external systems to store the external system's unique identifier for the     record. The external key field can then be used in future look-ups as opposed     to the external system having to know the Xytech key field value..   </li> </ul>"},{"location":"Untitled/#h_01HF433TKM2GMHVRE5CPR8X3X6","title":"Example Postman Collection calls","text":"<p>   An extensive set of example API calls is available via the   Platform\u2019s REST API Postman Collection.   This collection contains example calls for three types of documents (maintenance,   list, and setup).\u00a0 </p> <p>   We suggest forking the collection to your own workspace which enables you to   'pull' for updates as teh collection grows. </p>"},{"location":"Untitled/#h_01HKSM9RNVXQ9ESQEWDTMJMT2S","title":"Additional details (supplemental the Swagger documentation)","text":""},{"location":"Untitled/#h_01HWNFSGCW6RMVN3VDNWR22PS9","title":"PATCH - update datetime fields to 'null'","text":"<p>   It may seem like an obvious approach to use the 'update' operation with a value   of 'null' to clear a datetime field, but datetime fields will not get set to   null in that way. </p> <p>   The only way to 'null' a datetime field is by using the 'remove' operation. </p> <p>   Example PATCH payload that set's a datetime field to 'null': </p> [ \u00a0 \u00a0 { \"op\": \"remove\", \"path\": \"goodnight_date\", \"value\": null \u00a0 \u00a0 } ] <p> </p>"},{"location":"Untitled/#h_01HF36KBMD33F7GGS9YV7NZD27","title":"Query parameters","text":"<p> GET and PATCH List endpoints support query   parameters. </p> <p>   This section describes the syntax and options used for the query parameter. This   is a mandatory parameter for List documents. </p> <p>   The general format for a \u201cquery\u201d parameter is to add the parameter as   query={} to the end of a GET request for a List document after the parameter   delimiter (\u201c?\u201d), where the value of query= is a JSON object: </p> <p> http://{base_url}/documentList?query={key: value} </p> <p>Such as:</p> <p> http://{base_url}/jmJobList?query={\"job_no\": \"12345\"} </p> <p> Note: The query parameter is supported only for GET and PATCH   requests for List type documents and is not supported by GET   requests for Setup or Maintenance documents. </p> <p> In the simplest form, the value is a single piece of information, such as a string or integer. In more complex forms, the value is a JSON object containing specific formats as described below. </p> <p>   In these examples below, the baseurl is assumed to include the document   endpoint   e.g \u2018https://example.com/api/v2/database/example/JmJobList\u2019 </p> <p> </p>"},{"location":"Untitled/#h_01HY164T3J13GEVCTEYR228P1G","title":"TIP: URL encoding of special characters e.g. % and +","text":"<p>   When using HTML special characters as part of the query value, they must be URL   encoded. </p>    Example:\u00a0\u00a0to use a wildcard query such as \"%dave%\", the % needs substituting with %25.   \u00a0Once URL encoded will look like this %25dave%25 <p>Example GET query with URL encoded wildcard :</p> <p>   {{server}}/MoMediaOrderList?query={\"wo_desc\":\"%25dave%25\"}&amp;resultcolumns={\"L\":   [\"wo_no\", \"wo_desc\"]} </p> (Specifically the reason why\u00a0%dave% fails to return valid results it that %da\u00a0is the encoding for the\u00a0\u00da character)    This also applies to datetime values that use the offset attribute with the +   sign.     To include a value of \"2023-06-01T09:00+5:00\" in a URL query   parameter, substitute + with %2b Example:    ?query={\"wo_begin_dt\":{\"$range\":[\"2023-06-01T09:00%2b5:00\",\"2023-06-01T17:00%2b5:00\"]}} HTML URL Encoding Reference <ul> <li> String or Number </li> </ul> Description\u00a0          The value in returned items must match a specified string. The string         can either be letters or numbers. Wildcard \u2018%\u2019 can be used.\u00a0        Syntax\u00a0 \u201cfield\u201d:\u201d value\u201d <p>Examples:</p> <p> like: </p> <p> baseurl?Query={\u201cjob_desc\u201d:\u201d Big Apple Live\u201d}         </p> <p> baseurl?Query={\u201cjob_desc\u201d:\u201d%Big%\u201d}         </p> <p> baseurl?Query={\u201cjob_no\u201d:101101}         </p> <p>   To specify multiple key/value pairs, separate each key/value pair with a comma: baseurl?query={\"cust_id\":\"123\",\"job_type_no\":\"4\"} baseurl?query={\"cust_id\":\"123\",\"job_type_no\":\"4\",\"active\":\"Y\"}   Note: When specifying multiple key/value pairs, the API will return only items   that match ALL specified criteria. </p> <ul> <li> Range </li> </ul> Description          \u00a0The value in returned items must fall between a specified minimum         and maximum numeric value.        Syntax\u00a0 \u201cfield\u201d:{\"$range\":[lower_limit, upper_limit]} Examples          baseurl?Query={\u201cjob_no\u201d:{\"$range\":[100, 199]}}         baseurl?query={\"wo_begin_dt\":{\"$range\":[\"2023-12-01\",\"2023-12-31\"]}}         baseurl?query={\"wo_begin_dt\":{\"$range\":[\"2023-06-01T09:00\",\"2023-06-         01T17:00\"]}}        <ul> <li> In (Set) </li> </ul> Description\u00a0          The value in returned items must match one of the values provided         in a given set of values.        Syntax\u00a0 \u201cfield\u201d:{\"$in\":[\u201cvalue_1\u201d,\u201dvalue_2\u201d, \u2026 \u201dvalue_n\u201d]} Examples\u00a0 baseurl?Query={\u201cjob_no\u201d:{\"$in\":[100, 105, 110, 119]}} <p> </p> <p> TIP: Searching for multiple wildcard values </p> <p>   If you wanted to search for multiple wildcard values contained within a single   field that all need to exist, then you can include a list of wildcard values. </p> <p>   For example, if you wanted to search for media assets that have \"Tale\" AND \"Dark\"   in their \"master_desc\" field, you can use the following query parameter: </p> <p> {\"master_desc\":{$in:[\"%Tale%Dark%\",\"%Tale%Dark%\"]}} </p> <p>   Or with encoding of the % symbol (if using Postman) you need: </p> <p> {\"master_desc\":{$in:[\"%25Tale%25Dark%25\",\"%25Tale%25Dark%25\"]}} </p> <p> </p> <ul> <li> Null / Empty </li> </ul> Description\u00a0          The value in returned items must be NULL. Note: Put pipe characters         around NULL to differentiate it from the literal string \u201cNULL\u201d.        Syntax\u00a0 \"field\u201d: \u201c|NULL|\u201d\u00a0 Examples\u00a0 baseurl?Query={\u201cphone_number\u201d:{\"|NULL|\"}} <ul> <li> NE (Not Equal) </li> </ul> Description\u00a0          The value in returned items must not match the specified number,         string, or NULL.        Syntax\u00a0 \u201cfield\u201d:{\"$ne\":\u201dvalue\u201d} <p>           Examples:           \u00a0Not equal           \u00a0Not null\u00a0           \u00a0Not like         </p> <p>           baseurl?Query={\"job_desc \":{\"$ne\":\"Big Apple Live\"}}           baseurl?Query={\"cust_id\":{\"$ne\":1001}}           baseurl?Query={\"jm_phase_external_key\":{\"$ne\":\"|NULL|\"}}           baseurl?Query={\"wo_desc\":{\"$ne\":\"Test%\"},\"wo_type_no\": 83}\u00a0         </p> <p> </p> <p> </p> <p> NULL Values </p> <p>   The Null parameter returns any record that has a null value for the specified   key, which indicates that no value has ever been set. This differentiates it   from an empty string for text-based or date-based properties, a 0 value for numbers,   and true or false values for Boolean properties. </p> <p> Note: Not all properties support null values. If possible, check   whether the database column in the appropriate column allows nulls. </p> <p> Keys are strings and generally match the column name from a   given database table. It is   recommended to match the case of the key name as shown in the Swagger API documentation   if possible. </p> <p> Values </p> <p>- String values are not case-sensitive.</p> <p>   - DateTime values should be provided in a valid ISO date format. </p>"},{"location":"Untitled/#h_01HF434Z8JY77TBZKP9TZXEN8A","title":"resultColumns parameter","text":"<p> Used by the GET method on List and (v10.6) Maintenance endpoints. </p> <p>   ResultColumns parameter is used to define the fields you wish to have returned   in the response.   Without this parameter, the response will contain all document fields. </p> <p> For example: {baseurl}/JmJobList?Query={\"job_no\":2}&amp;resultColumns={\"L\":[\"job_no\",\"job_desc\"]} </p> <p>   Job No. and Job Description fields will be included in the response.   Important to include the \u201cL\u201d top-level element. </p> <p> Sub-Table columns </p> <p>   Many endpoints include related sub-tables in their responses. Example syntax   to include specific sub-table columns. </p> <p>   Below example fetches a tranmission order description and all it's service row   numbers: </p> <p> {base_url}/XmTransmissionOrder/wo_no_seq=7655-1?resultColumns={\"jm_work_order\":[\"wo_desc\"],\"mo_service_row\":[\"service_row_no\"]} </p> <p> Response: </p> { \"jm_work_order\": [ \u00a0 \u00a0 \u00a0 \u00a0 { \"wo_desc\": \"WS Transmission Test\", \"mo_service_row\": [ \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 { \"service_row_no\": { \"service_row_no\": 9933, \"external_key\": null \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }, \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 { \"service_row_no\": { \"service_row_no\": 9934, \"external_key\": null \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ] \u00a0 \u00a0 \u00a0 \u00a0 } \u00a0 \u00a0 ] } <p> Performance recomendation. Always use the ResultColumns parameter   otherwise responses will return large numbers of fields most of which will not   be required and only adds to the system perfromance overhead. In future API versions,   this will become a mandatory parameter. </p>"},{"location":"Untitled/#h_01HKSPJS614F0QQG81TQQDCZ24","title":"Additional parameters","text":""},{"location":"Untitled/#h_01HF36DRPX0VSVY5PSTZY3C9MY","title":"saveArgument","text":"<p>   In some cases, you must also add a header with the SaveArgument parameter to   trigger the app server to perform a function as part of an API call. For example,   when creating a Work Order, to load a Work Order Template you must provide the   wo_template_no value in the payload as well as set the SaveArguement header: </p> <p>   LoadTemplate: SaveArgument : {\"LoadTemplate\":\"2\"} </p> <p> </p> <p>   LoadServiceTemplate, loads a service template to a Media Order or a Transmission   Order: </p> <p> SaveArgument : {\"LoadServiceTemplate\":\"10\"} </p> <p> </p> <p>   BidApproval, changes the bid approval state of a Bid using an number that maps   to the approval </p>"},{"location":"Untitled/#h_01HTG0TJYBG38SHP0XZRTPJN5G","title":"SaveArgument : {\"BidApproval\":\"0\"}","text":"<p>Approval number mapping:</p> 0 Approval 1 Unapproval 2 ApproveAsChangeMemo 3 ApproveAndUnApproveOriginal 4 Abort <p> </p>"},{"location":"Untitled/#h_01HKSQ234JHJYHVREZWD7C867W","title":"alternatekeyhandling","text":"<p>   Suppresses additional key fields from the responses. If you do not need to work   with key fields other than the primary key, use this parameter to keep the API   call performant and reduce the processing overhead when not working with alternate   key fields (v10.6). </p> <p>   Applicable to all GET calls for List, Maintenance &amp; Report endpoints. </p> <p>   Values are \u2018ignore\u2019 or \u2018include\u2019. </p> <p>   Default value = \u2018include\u2019 (includes alternate keys in the response) </p> <p>Example:</p> <p> URL Parameter:- alternatekeyhandling:include (default)\u00a0 </p> { \"L\": [ \u00a0 \u00a0 \u00a0 \u00a0 { \"master_no\": { \"master_no\": 915, \"barcode\": \"MM915\", \"external_key\": \"VX-90\", \"umid\": null \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }, \"cust_id\": null, \"company_name\": null, \"master_desc\": null, \"barcode\": \"MM915\", ... <p> URL Parameter:- alternatekeyhandling:ignore\u00a0 </p> { \"L\": [ \u00a0 \u00a0 \u00a0 \u00a0 { \"master_no\": { \"master_no\": 915 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }, \"cust_id\": null, \"company_name\": null, \"master_desc\": null, \"barcode\": \"MM915\", ... <p>   Notice how the additional key fields barcode, external_key &amp; umid are not   provided. </p> <p>   It's recommended to always include this header with the value 'ignore', unless   working with alternate keys. </p>"},{"location":"Untitled/#h_01HKSQ339VZTSRBSD25DCPTR8A","title":"nullvaluehandling","text":"<p>   Suppresses all null value fields from the response. Using this parameter reduces   the payload size dramatically, especially for larger queries (v10.6). </p> <p>   Applicable to all GET calls for List, Maintenance &amp; Report endpoints. </p> <p>   Values are \u2018ignore\u2019 or \u2018include\u2019. </p> <p>   Default value = \u2018include\u2019 (includes null values in the response) </p> <p>Example:</p> <p> URL Parameter:- nullvaluehandling=include (default)\u00a0 </p> { \"L\": [ \u00a0 \u00a0 \u00a0 \u00a0 { \"master_no\": { \"master_no\": 915, \"barcode\": \"MM915\", \"external_key\": \"VX-90\", \"umid\": null \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }, \"cust_id\": null, \"company_name\": null, \"master_desc\": null, \"barcode\": \"MM915\", ... <p> URL Parameter:- nullvaluehandling=ignore </p> { \"L\": [ \u00a0 \u00a0 \u00a0 \u00a0 { \"master_no\": { \"master_no\": 915, \"barcode\": \"MM915\", \"external_key\": \"VX-90\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }, \"barcode\": \"MM915\", ... <p>   Notice how all null value fields are omitted.   It's recommended to always include this parameter with the value 'ignore', unless   visibility of null values is required. </p>"},{"location":"Untitled/#h_01HF36DD3YKS0AAT7CYJT4MW00","title":"Source-Time-Zone-Name","text":"<p>   The REST API uses Date time formats in ISO format with an optional offset value. </p> <p>   e.g. 2014-11-03T22:20:00+00:00 </p> <p>   If you omit the offset value when using POST to create a record, you can use   a header parameter to set the time zone your dates are using. Key: Source-Time-Zone-Name\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Value: {Windows Time Zone name} </p> <p>   e.g. : header 'Source-Time-Zone-Name: Pacific Standard Time ' </p> <p>   Will create records using Pacific Standard Time as the time zone for the payload   times.   Remember to omit the offset values in your time formats. </p>"},{"location":"Untitled/#h_01HF36JJ5WR17BWBNHKZZCCQR1","title":"PATCH Using POST Payload","text":"<p>   There are two PATCH methods, one where you define the field and the operation,   the other is to use the full POST JSON payload. </p> <p>   To use the PATCH with the full JSON payload, you must include the header parameter: </p> <p> 'Content-Type: application/json-patch+json' </p> <p>Example Job update (cURL format):</p> <p>curl --location --request PATCH</p> 'https: //{base_url}/api/v2/database/{database_name}/JmJob/job_no=345' \\      --header\u00a0'Content-Type:\u00a0application/json-patch+json'\u00a0\\         --header\u00a0'Authorization:\u00a0Basic\u00a0eHl0ZWNoOk1lZGlhMjwqNSE='\u00a0\\    --data\u00a0'{ \u00a0\u00a0\"jm_job\":\u00a0[    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ \u00a0\"job_no\":\u00a0{         \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"job_no\":\u00a0345      \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},         \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"job_desc\":\"Leaves\u00a0of\u00a0October\", \"job_type_no\":\u00a0{    \"job_type_no\":\u00a07         \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},    \u00a0\"po\":\u00a0\"PO1234\", \u00a0\"job_reference\":     \"Streets\u00a0Ahead\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} \u00a0\u00a0\u00a0\u00a0] }' <p> Notes: </p> <p>   The payload must include the existing primary key (job_no in the above example)   as a URL parameter as well as in the body payload. </p> <p>   The expected response status code for a successful PATCH is \u2018204\u2019 and there will   be no response body. </p>"},{"location":"Untitled/#h_01HF40NRXV8NZWCRJ5PV9TMSZ1","title":"PATCH using List endpoints","text":"<p>   List endpoints also support the PATCH method so that you can update multiple   records using a query (see \u2018GET \u2013 Query Parameters\u2019 section above for details   on available query parameters). This method is teh equilivant API functionality   of Grid Update feature of the UI.   Example to update multiple jobs using the $in query parameter: </p> PATCH {base_url}/JmJobList?query={\"job_no\": {\"$in\": [\"410\",\"411\"]}} [ \u00a0\u00a0\u00a0\u00a0{ \"op\": \"replace\",    \"path\":\u00a0\"job_reference\",    \u00a0\"value\":\u00a0\"These\u00a0are\u00a0not\u00a0taxed\" \u00a0\u00a0\u00a0\u00a0} ]      As\u00a0with\u00a0GET,\u00a0wildcards\u00a0\u2018%\u2019\u00a0are\u00a0supported\u00a0such\u00a0as:    PATCH {base_url}/\u00a0JmJobList?Query={\"job_desc\":\u00a0\"Sport%\"}"},{"location":"Untitled/#h_01HF36G51KQBZK969TYVT0Y4BW","title":"POST method","text":"<p> Mandatory Fields to Create New Items </p> <p>   The Swagger model identifies many fields as mandatory (nullable: false), which   indicates that a value must be provided when the item is written to the database.   However, in some cases, the business logic will provide default values, so it   may not be strictly necessary to pass values for these fields to the API to create   a new record.\u00a0   For example, in a basic payload to create a Work Order, Swagger identifies at   least 25 fields as mandatory, but the most basic payload to create a Work Order   is below: </p> { \u00a0\"jm_work_order\":\u00a0[          \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ \u00a0\"external_key\":\u00a0\"externalID\",          \u00a0\"wo_desc\":\u00a0\"Match2\",          \u00a0\"wo_begin_dt\":\u00a0\"2022-01-01T00:00\", \"wo_end_dt\":\u00a0\"2022-01-01T06:00\", \u00a0\u00a0\u00a0\"wo_type_no\":\u00a02, \"phase_code\":\u00a0\"Bid\",          \"rate_card_no\":\u00a01, \u00a0\u00a0\u00a0\"cust_id\": \"6\",          \"wo_template_no\":\u00a0\"2\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} \u00a0\u00a0\u00a0\u00a0] } <p>   See other basic payload examples in the public   Postman Collection. </p>"},{"location":"Untitled/#h_01HKSSB696J0EHXSY0WNGE2RCQ","title":"Custom Field handling","text":"<p> Any custom fields you have defined through document customization are automatically included in REST API payloads. The naming convention is a combination of the Custom Code you created plus the internal field name concatenated with an underscore. i.e. {customization code}_{field name} </p> <p> Document customization screen showing the Customnization Code </p> <p> </p> <p> Document customization screen showing the internal field names: </p> <p> </p> <p> Response from a GET call to fetch a Work Order showing the payload custom fields: </p> <p> </p>"},{"location":"Untitled/#h_01HF436SPYJR54ZAYHZFVSCF3W","title":"Appendix A \u2013 Endpoint List","text":"<p>   There are over 1000 individual documents (endpoints) available to the Platform\u2019s   REST API. Below is a small sample of those documents. The full list of available   documents can be obtained directly from the Platform using the Document Customizations   query found in the System module. Specific documentation on each document can   be found via the Swagger site. </p> ID\u00a0 Class Name\u00a0 Document Description\u00a0 Document Type 10315\u00a0 JmJob\u00a0 Job\u00a0 Maintenance 315\u00a0 JmJobList\u00a0 Jobs\u00a0 Select (List) 10317\u00a0 JmJobStatus\u00a0 Job Statuses\u00a0 Setup 10318\u00a0 JmJobTable1\u00a0 Subscription\u00a0 Setup 10322\u00a0 JmJobType\u00a0 Job Types\u00a0 Setup 359\u00a0 JmTrxReport\u00a0 Transaction Reports\u00a0 Select (List) 10339\u00a0 JmWorkOrder Work Order\u00a0 Maintenance 10346\u00a0 JmWoTransaction\u00a0 Work Order Transactions\u00a0 Maintenance"},{"location":"Untitled/#h_01HF436SPY7179Z7YT86HJW6HF","title":"","text":""},{"location":"Untitled/#h_01HF436A57T9EYFPJB4NFHXTPH","title":"Appendix B \u2013 Swagger Examples","text":""}]}